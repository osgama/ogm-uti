# Configura la salida en UTF-8 para manejar correctamente acentos y caracteres especiales
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Obtiene la ruta donde está ubicado el script
$scriptPath = $PSScriptRoot

# Obtiene la ruta del perfil del usuario actual (para Documentos\Codigo)
$userProfile = [System.Environment]::GetFolderPath('UserProfile')
$rootDestinationPath = "$userProfile\Documents\Codigo"

# Lista de nombres de repositorios
$reposNames = @("repo1", "repo2")

# Función para clonar repositorios
function ClonarRepositorios {
    param (
        [string]$repoName
    )

    # Variables dinámicas para los nombres de archivos y carpetas
    $repoFile = "$scriptPath\repos_$repoName.txt"
    $logFile = "$rootDestinationPath\$repoName\clone_log_$repoName.txt"
    $destinationPath = "$rootDestinationPath\$repoName"

    # Verifica si la carpeta base "Codigo" existe en Documentos, si no, la crea
    if (-not (Test-Path -Path $rootDestinationPath)) {
        Write-Host "**************************************************"
        Write-Host "*  La carpeta base 'Codigo' no existe, creando... *"
        Write-Host "**************************************************"
        New-Item -Path $rootDestinationPath -ItemType Directory
        Add-Content -Path $logFile -Value "$(Get-Date) - Carpeta base 'Codigo' creada en Documentos."
    }

    # Verifica si el archivo de repositorios existe en la misma ruta que el script
    if (-not (Test-Path -Path $repoFile)) {
        Write-Host "**************************************************"
        Write-Host "*  El archivo de repositorios $repoFile no existe.  *"
        Write-Host "**************************************************" -ForegroundColor Red
        return
    }
    if ((Get-Content $repoFile).Count -eq 0) {
        Write-Host "**************************************************"
        Write-Host "*  El archivo de repositorios $repoFile está vacío. *"
        Write-Host "**************************************************" -ForegroundColor Red
        return
    }

    # Si el directorio de destino no existe, lo crea
    if (-not (Test-Path -Path $destinationPath)) {
        Write-Host "**************************************************"
        Write-Host "*  El directorio no existe, creando $destinationPath...  *"
        Write-Host "**************************************************" -ForegroundColor Yellow
        New-Item -Path $destinationPath -ItemType Directory
        Add-Content -Path $logFile -Value "$(Get-Date) - Directorio $destinationPath creado."
    } else {
        Write-Host "**************************************************"
        Write-Host "*  El directorio $repoName ya existe, continuando...  *"
        Write-Host "**************************************************" -ForegroundColor Green
    }

    # Cambia el directorio a la ruta de destino
    Set-Location -Path $destinationPath

    # Variables para el resumen final
    $reposEliminados = 0
    $reposClonados = 0
    $reposErrores = 0

    # Inicia el tiempo de ejecución del proceso
    $startTime = Get-Date
    Write-Host "**************************************************"
    Write-Host "*  Comenzando la clonación de repositorios en $repoName a las $startTime  *"
    Write-Host "**************************************************"

    # Lee el archivo de repositorios y clona cada repositorio
    Get-Content $repoFile | ForEach-Object {
        $repoUrl = $_
        $repoNameInUrl = $repoUrl.Split("/")[-1].Replace(".git", "")  # Extrae el nombre del repo de la URL
        $repoPath = "$destinationPath\$repoNameInUrl"

        # Verifica si el repositorio ya fue clonado
        if (Test-Path -Path $repoPath) {
            Write-Host "**************************************************"
            Write-Host "*  El repositorio $repoNameInUrl ya existe, eliminando...  *"
            Write-Host "**************************************************" -ForegroundColor Yellow
            Remove-Item -Recurse -Force $repoPath
            Add-Content -Path $logFile -Value "$(Get-Date) - Repositorio $repoNameInUrl eliminado."
            $reposEliminados++
        }

        # Intenta clonar el repositorio y captura cualquier error
        try {
            $repoStartTime = Get-Date
            Write-Host "**************************************************"
            Write-Host "*  Clonando el repositorio: $repoNameInUrl  *"
            Write-Host "**************************************************" -ForegroundColor Cyan

            # Clona el repositorio
            git clone $repoUrl
            $repoEndTime = Get-Date
            $repoDuration = $repoEndTime - $repoStartTime

            Add-Content -Path $logFile -Value "$(Get-Date) - Repositorio $repoNameInUrl clonado exitosamente en $repoDuration."
            $reposClonados++
        }
        catch {
            Write-Host "**************************************************"
            Write-Host "*  Error al clonar el repositorio: $repoNameInUrl  *"
            Write-Host "**************************************************" -ForegroundColor Red
            Add-Content -Path $logFile -Value "$(Get-Date) - Error al clonar $repoNameInUrl ${_}"
            $reposErrores++
        }
    }

    # Finaliza el tiempo de ejecución
    $endTime = Get-Date
    $duration = $endTime - $startTime
    Write-Host "**************************************************"
    Write-Host "*  Todos los repositorios de $repoName han sido procesados en $duration  *"
    Write-Host "**************************************************" -ForegroundColor Green

    # Agregar al log el resumen final
    Add-Content -Path $logFile -Value "$(Get-Date) - Proceso de clonación finalizado en $duration."
    Add-Content -Path $logFile -Value "Resumen: $reposEliminados repositorios eliminados, $reposClonados repositorios clonados, $reposErrores errores."

    # Muestra el resumen del proceso
    Write-Host "**************************************************"
    Write-Host "*  Resumen del proceso en $repoName  *"
    Write-Host "**************************************************" -ForegroundColor Blue
    Write-Host "*  Repositorios eliminados: $reposEliminados  *"
    Write-Host "*  Repositorios clonados: $reposClonados  *"
    Write-Host "*  Errores encontrados: $reposErrores  *"
    Write-Host "**************************************************" -ForegroundColor Blue
}

# Muestra el menú de opciones con asteriscos bien alineados
Write-Host "**************************************************"
Write-Host "*  Selecciona una opción para clonar repositorios  *"
Write-Host "**************************************************"
Write-Host "*  1. Clonar repositorios en 'repo1'              *"
Write-Host "*  2. Clonar repositorios en 'repo2'              *"
Write-Host "*  3. Clonar todos los repositorios (repo1 y repo2) *"
Write-Host "*  4. Salir                                       *"
Write-Host "**************************************************"
$opcion = Read-Host "Introduce una opción"

# Validación de la opción ingresada
if ($opcion -eq "1" -or $opcion -eq "2") {
    # Llamamos a la función con el repositorio seleccionado (repo1 o repo2)
    ClonarRepositorios -repoName $reposNames[$opcion - 1]
} elseif ($opcion -eq "3") {
    # Clonar ambos repositorios
    foreach ($repo in $reposNames) {
        ClonarRepositorios -repoName $repo
    }
} elseif ($opcion -eq "4") {
    Write-Host "Saliendo del script..." -ForegroundColor Yellow
} else {
    Write-Host "* Opción no válida. Elige 1, 2, 3 o 4. *" -ForegroundColor Red
}
