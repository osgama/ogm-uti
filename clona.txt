# Configura la salida en UTF-8 para manejar correctamente acentos y caracteres especiales
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Obtiene la ruta donde está ubicado el script
$scriptPath = $PSScriptRoot

# Obtiene la ruta del perfil del usuario actual (para Documentos\Codigo)
$userProfile = [System.Environment]::GetFolderPath('UserProfile')
$rootDestinationPath = "$userProfile\Documents\Codigo"

# Muestra el menú de opciones con asteriscos
Write-Host "****************************************"
Write-Host "*  Selecciona una opción para clonar repositorios:  *"
Write-Host "****************************************"
Write-Host "*  1. Clonar repositorios en 'repo1'                 *"
Write-Host "*  2. Clonar repositorios en 'repo2'                 *"
Write-Host "****************************************"
$opcion = Read-Host "Introduce 1 o 2"

# Variables dinámicas basadas en la opción seleccionada
switch ($opcion) {
    1 {
        $reposFile = "$scriptPath\repos_opcion1.txt"  # Archivo de repositorios para la opción 1
        $destinationPath = "$rootDestinationPath\repo1"  # Carpeta en Documentos para la opción 1
        $logFile = "$destinationPath\clone_log_opcion1.txt"  # Log para la opción 1
    }
    2 {
        $reposFile = "$scriptPath\repos_opcion2.txt"  # Archivo de repositorios para la opción 2
        $destinationPath = "$rootDestinationPath\repo2"  # Carpeta en Documentos para la opción 2
        $logFile = "$destinationPath\clone_log_opcion2.txt"  # Log para la opción 2
    }
    default {
        Write-Host "* Opción no válida. Elige 1 o 2. *" -ForegroundColor Red
        exit
    }
}

# Verifica si el archivo de repositorios existe en la misma ruta que el script
if (-not (Test-Path -Path $reposFile)) {
    Write-Host "* El archivo de repositorios $reposFile no existe en la ruta del script. *" -ForegroundColor Red
    exit
}
if ((Get-Content $reposFile).Count -eq 0) {
    Write-Host "* El archivo de repositorios $reposFile está vacío. *" -ForegroundColor Red
    exit
}

# Si el directorio de destino no existe, lo crea
if (-not (Test-Path -Path $destinationPath)) {
    Write-Host "* El directorio no existe, creando $destinationPath... *" -ForegroundColor Yellow
    New-Item -Path $destinationPath -ItemType Directory
    Add-Content -Path $logFile -Value "$(Get-Date) - Directorio $destinationPath creado."
} else {
    Write-Host "* El directorio ya existe, continuando... *" -ForegroundColor Green
    Add-Content -Path $logFile -Value "$(Get-Date) - Directorio $destinationPath ya existía."
}

# Cambia el directorio a la ruta de destino (Documentos\Codigo\repo1 o repo2)
Set-Location -Path $destinationPath

# Variables para el resumen final
$reposEliminados = 0
$reposClonados = 0
$reposErrores = 0

# Inicia el tiempo de ejecución del proceso
$startTime = Get-Date
Write-Host "* Comenzando la clonación de repositorios a las $startTime *"

# Lee el archivo de repositorios y clona cada repositorio
Get-Content $reposFile | ForEach-Object {
    $repoUrl = $_
    $repoName = $repoUrl.Split("/")[-1].Replace(".git", "")  # Extrae el nombre del repo de la URL
    $repoPath = "$destinationPath\$repoName"

    # Verifica si el repositorio ya fue clonado
    if (Test-Path -Path $repoPath) {
        Write-Host "* El repositorio $repoName ya existe, eliminando... *" -ForegroundColor Yellow
        Remove-Item -Recurse -Force $repoPath
        Add-Content -Path $logFile -Value "$(Get-Date) - Repositorio $repoName eliminado."
        $reposEliminados++
    }

    # Intenta clonar el repositorio y captura cualquier error
    try {
        $repoStartTime = Get-Date
        Write-Host "****************************************" -ForegroundColor Cyan
        Write-Host "* Clonando el repositorio: $repoName *" -ForegroundColor Cyan
        Write-Host "****************************************" -ForegroundColor Cyan

        # Clona el repositorio
        git clone $repoUrl
        $repoEndTime = Get-Date
        $repoDuration = $repoEndTime - $repoStartTime

        Add-Content -Path $logFile -Value "$(Get-Date) - Repositorio $repoName clonado exitosamente en $repoDuration."
        $reposClonados++
    }
    catch {
        Write-Host "* Error al clonar el repositorio: $repoName *" -ForegroundColor Red
        Add-Content -Path $logFile -Value "$(Get-Date) - Error al clonar $repoName ${_}"
        $reposErrores++
    }
}

# Finaliza el tiempo de ejecución
$endTime = Get-Date
$duration = $endTime - $startTime
Write-Host "****************************************" -ForegroundColor Green
Write-Host "* Todos los repositorios han sido procesados en $duration *" -ForegroundColor Green
Write-Host "****************************************" -ForegroundColor Green

# Agregar al log el resumen final
Add-Content -Path $logFile -Value "$(Get-Date) - Proceso de clonación finalizado en $duration."
Add-Content -Path $logFile -Value "Resumen: $reposEliminados repositorios eliminados, $reposClonados repositorios clonados, $reposErrores errores."

# Mostrar el resumen final en pantalla
Write-Host "****************************************" -ForegroundColor Blue
Write-Host "* Resumen del proceso *" -ForegroundColor Blue
Write-Host "Repositorios eliminados: $reposEliminados" -ForegroundColor Blue
Write-Host "Repositorios clonados: $reposClonados" -ForegroundColor Blue
Write-Host "Errores encontrados: $reposErrores" -ForegroundColor Blue
Write-Host "****************************************" -ForegroundColor Blue

# Reproducir un sonido al finalizar el proceso (requiere sonido habilitado en el sistema)
[console]::beep(1000,500)  # Un pitido al finalizar

# Notificación visual con un mensaje al finalizar (para sistemas con notificaciones)
Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
public class ToastNotification
{
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool MessageBeep(uint type);

    public static void Show()
    {
        MessageBeep(0);
    }
}
"@
[ToastNotification]::Show()