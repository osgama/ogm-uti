kind: Template
apiVersion: v1
labels:
  template: maven-spring-boot
  template.version: '0.1'
parameters:
  - name: ENVIRONMENT
    required: true
  - name: CPU_LIMIT
    required: true
  - name: CPU_REQUEST
    required: true
  - name: MEMORY_LIMIT
    required: true
  - name: MEMORY_REQUEST
    required: true
  - name: APP
    required: true
  - name: APP_NAME
    required: true
  - name: APP_PROJECT
    required: true
  - name: ECS_CLUSTER
    required: false
  - name: CERT
    description: the certificate
    required: false
  - name: CERT_POLICY_NAME
    required: false
  - name: CERT_ORDER_ID
    required: false
  - name: USE_SECRET_API
    description: secret api
    required: false
  - name: FORCE_SELFSIGNED
    description: self signed
    required: false
  - name: SECRET
    description: Secret for Cyberark
    required: false
  - name: CUSTOM_JAVA_OPTS
    description: Java custom parameters
    required: false
  - name: NAS_PATH
    required: false
  - name: NAS_NAME
    required: false
  - name: NAS_CLAIM
    required: false
  - name: SUPPLEMENTAL_GROUP
    required: false
  - name: IMAGE_NAME
    required: true
  - name: APP_VERSION
    required: true
  - name: DOCKER_NAMESPACE
    required: true
  - name: DOCKER_REGISTRY
    required: true
  - name: TOMCAT_APP_SERVICE_NAME
    description: service name
    required: false
  - name: TOMCAT_CONTEXT_ROOT
    description: service context
    required: false
  - name: LISTAA
    description: LISTAA
    required: true
  - name: LISTAB
    description: LISTAB
    required: true
  - name: NAMESPACE_PROJECT
    description: NAMESPACE_PROJECT
    required: true
  - name: CLUSTER1
    description: CLUSTER1
    required: true
  - name: CLUSTER2
    description: CLUSTER2
    required: true
  - name: BASE_DIRECTORIO_LOGS
    description: BASE_DIRECTORIO_LOGS
    required: true
  - name: ENTORNO
    description: ENTORNO
    required: true
  - name: USERS
    description: USERS
    required: true
objects:
  - kind: Service
    apiVersion: v1
    spec:
      ports:
      - name: 9093-tcp
        port: 9093
        protocol: TCP
        targetPort: 9093
      selector:
        deploymentConfig: "${APP_NAME}-${ENVIRONMENT}"
        app: "${APP_NAME}"
      sessionAffinity: None
      type: ClusterIP
    metadata:
      name: "${APP_NAME}-${ENVIRONMENT}"
      annotations:
        description: The application's http port.
      labels:
        app: "${APP_NAME}"
  - kind: Route
    apiVersion: v1
    id: "${APP_NAME}-http"
    metadata:
      name: "${APP_NAME}-${ENVIRONMENT}"
      annotations:
        description: Route for application's http service.
      labels:
        app: "${APP_NAME}"
    spec:
      host: "${APP_NAME}-${ENVIRONMENT}-${APP_PROJECT}.${ECS_CLUSTER}"
      port:
        targetPort: 9093-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: passthrough
      to:
        kind: Service
        name: "${APP_NAME}-${ENVIRONMENT}"
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-${ENVIRONMENT}"
      labels:
        app: "${APP_NAME}"
    spec:
      strategy:
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 900
          maxSurge: "25%"
          maxUnavailable: "25%"
        type: Rolling
      triggers: []
      replicas: 1
      selector:
        app: "${APP_NAME}"
        deploymentConfig: "${APP_NAME}-${ENVIRONMENT}"
      template:
        metadata:
          name: "${APP_NAME}-${ENVIRONMENT}"
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
            ecs.o2c/${APP_NAME}.certificates: "${CERT_POLICY_NAME}"
            ecs.o2c/enable: "${APP_NAME}"
            ecs.o2c/${APP_NAME}.secrets: "${SECRET}"
            ecs.o2c.certificatesnicknames: "${CERT_POLICY_NAME}"
            ecs.o2c.secretsnicknames: "${SECRET}"
          creationTimestamp: null
          labels:
            app: "${APP_NAME}"
            deploymentConfig: "${APP_NAME}-${ENVIRONMENT}"
        spec:
          volumes:
            - name: "${NAS_NAME}"
              persistentVolumeClaim:
                claimName: "${NAS_CLAIM}"
          securityContext:
            supplementalGroups: "${SUPPLEMENTAL_GROUP}"
          containers:
          - name: "${APP_NAME}"
            image: "${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${IMAGE_NAME}:${APP_VERSION}"
            volumeMounts:
              - name: "${NAS_NAME}"
                mountPath: "${NAS_PATH}"
            imagePullPolicy: Always
            env:
              - name: ENVIRONMENT
                value: "${ENVIRONMENT}"
              - name: VERSION
                value: "${APP_VERSION}"
              - name: CERT_POLICY_NAME
                value: "${CERT_POLICY_NAME}"
              - name: CERT_ORDER_ID
                value: "${CERT_ORDER_ID}"
              - name: SECRET
                value: "${SECRET}"
              - name: CERT
                value: "${CERT}"
              - name: USE_CORTOSIS
                value: "1"
              - name: USE_CORTOSIS_CERTS
                value: "1"
              - name: USE_SECRET_API
                value: "${USE_SECRET_API}"
              - name: FORCE_SELFSIGNED
                value: "${FORCE_SELFSIGNED}"
              - name: CUSTOM_JAVA_OPTS
                value: "${CUSTOM_JAVA_OPTS}"
              - name: TOMCAT_APP_SERVICE_NAME
                value: "${TOMCAT_APP_SERVICE_NAME}"
              - name: TOMCAT_CONTEXT_ROOT
                value: "${TOMCAT_CONTEXT_ROOT}"
              - name: LISTAA
                value: "${LISTAA}"
              - name: LISTAB
                value: "${LISTAB}"
              - name: NAMESPACE_PROJECT
                value: "${NAMESPACE_PROJECT}"
              - name: CLUSTER1
                value: "${CLUSTER1}"
              - name: CLUSTER2
                value: "${CLUSTER2}"
              - name: BASE_DIRECTORIO_LOGS
                value: "${BASE_DIRECTORIO_LOGS}"
              - name: ENTORNO
                value: "${ENTORNO}"
              - name: USERS
                value: "${USERS}"
            resources:
              limits:
                cpu: "${CPU_LIMIT}"
                memory: "${MEMORY_LIMIT}"
              requests:
                cpu: "${CPU_REQUEST}"
                memory: "${MEMORY_REQUEST}"
            ports:
              - name: https
                containerPort: 9093
                protocol: TCP