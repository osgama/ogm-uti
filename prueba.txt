# Configura la salida en UTF-8 para manejar correctamente acentos y caracteres especiales
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Obtiene la ruta donde está ubicado el script
$scriptPath = $PSScriptRoot

# Obtiene la ruta del perfil del usuario actual (para Documentos\Codigo)
$userProfile = [System.Environment]::GetFolderPath('UserProfile')
$defaultDestinationPath = "$userProfile\Documents\Codigo"

# Guarda el directorio de inicio para volver a él después de cada clonación
$originalDirectory = Get-Location

# Lista de nombres de repositorios
$reposNames = @("dhalia", "camelia")

# Menú de selección de rama
Write-Host "**************************************************"
Write-Host "*  Selecciona la rama que deseas clonar:          *"
Write-Host "**************************************************"
Write-Host "*  1. master                                      *"
Write-Host "*  2. release/dev                                 *"
Write-Host "*  3. release/uat                                 *"
Write-Host "**************************************************"
$ramaSeleccionada = Read-Host "Introduce una opción (1-3)"

# Asigna la rama seleccionada según la entrada del usuario
switch ($ramaSeleccionada) {
    "1" { $branch = "master" }
    "2" { $branch = "release/dev" }
    "3" { $branch = "release/uat" }
    default {
        Write-Host "Opción no válida. Se seleccionará 'master' por defecto."
        $branch = "master"
    }
}

Write-Host "*  Clonando la rama seleccionada: $branch *"

# Función para clonar repositorios en una rama específica y en una ruta especificada
function ClonarRepositorios {
    param (
        [string]$repoName,
        [string]$destinationPath, # Ruta de destino
        [ref]$totalClonados,
        [ref]$totalEliminados,
        [ref]$totalErrores
    )

    # Variables dinámicas para los nombres de archivos y carpetas
    $repoFile = "$scriptPath\repos_$repoName.txt"
    $logFile = "$destinationPath\$repoName\clone_log_$repoName.txt"
    $repoDestinationPath = "$destinationPath\$repoName"

    # Verifica si la carpeta de destino base existe, si no, la crea
    if (-not (Test-Path -Path $destinationPath)) {
        Write-Host "**************************************************"
        Write-Host "*  La carpeta de destino no existe, creando...   *"
        Write-Host "**************************************************"
        New-Item -Path $destinationPath -ItemType Directory
        Add-Content -Path $logFile -Value "$(Get-Date) - Carpeta base '$destinationPath' creada."
    }

    # Verifica si el archivo de repositorios existe en la misma ruta que el script
    if (-not (Test-Path -Path $repoFile)) {
        Write-Host "**************************************************"
        Write-Host "*  El archivo de repositorios $repoFile no existe.  *"
        Write-Host "**************************************************" -ForegroundColor Red
        return
    }
    if ((Get-Content $repoFile).Count -eq 0) {
        Write-Host "**************************************************"
        Write-Host "*  El archivo de repositorios $repoFile está vacío. *"
        Write-Host "**************************************************" -ForegroundColor Red
        return
    }

    # Si el directorio de destino no existe, lo crea
    if (-not (Test-Path -Path $repoDestinationPath)) {
        Write-Host "**************************************************"
        Write-Host "*  El directorio no existe, creando $repoDestinationPath...  *"
        Write-Host "**************************************************" -ForegroundColor Yellow
        New-Item -Path $repoDestinationPath -ItemType Directory
        Add-Content -Path $logFile -Value "$(Get-Date) - Directorio $repoDestinationPath creado."
    } else {
        Write-Host "**************************************************"
        Write-Host "*  El directorio $repoDestinationPath ya existe, eliminando...  *"
        Write-Host "**************************************************" -ForegroundColor Yellow
        Remove-Item -Recurse -Force $repoDestinationPath
        Add-Content -Path $logFile -Value "$(Get-Date) - Directorio $repoDestinationPath eliminado."
        $totalEliminados.Value++
        # Vuelve a crear el directorio eliminado
        New-Item -Path $repoDestinationPath -ItemType Directory
    }

    # Cambia el directorio a la carpeta del repositorio para hacer el clon dentro
    Set-Location -Path $repoDestinationPath

    # Lee el archivo de repositorios y clona cada repositorio en la rama especificada
    $reposUrls = Get-Content $repoFile
    foreach ($repoUrl in $reposUrls) {
        $repoNameInUrl = $repoUrl.Split("/")[-1].Replace(".git", "")  # Extrae el nombre del repo de la URL

        # Intenta clonar el repositorio en la rama especificada
        try {
            Write-Host "**************************************************"
            Write-Host "*  Clonando el repositorio: $repoNameInUrl en la rama $branch  *"
            Write-Host "**************************************************" -ForegroundColor Cyan

            git clone -b $branch $repoUrl .
            if ($LASTEXITCODE -ne 0) {
                Write-Host "**************************************************"
                Write-Host "*  Rama $branch no encontrada. Clonando master por defecto  *"
                Write-Host "**************************************************" -ForegroundColor Yellow
                git clone -b master $repoUrl .
            }
            $totalClonados.Value++
        }
        catch {
            Write-Host "**************************************************"
            Write-Host "*  Error al clonar el repositorio: $repoNameInUrl  *"
            Write-Host "**************************************************" -ForegroundColor Red
            Add-Content -Path $logFile -Value "$(Get-Date) - Error al clonar $repoNameInUrl en la rama $branch ${_}"
            $totalErrores.Value++
        }
    }

    # Vuelve al directorio original
    Set-Location -Path $originalDirectory
}

# Bucle principal del menú
while ($true) {
    # Muestra el menú de opciones con asteriscos bien alineados
    Write-Host "**************************************************"
    Write-Host "*  Selecciona una opción para clonar o descargar repositorios  *"
    Write-Host "**************************************************"
    Write-Host "*  1. Clonar repositorios en 'dhalia'                        *"
    Write-Host "*  2. Clonar repositorios en 'camelia'                       *"
    Write-Host "*  3. Clonar todos los repositorios (dhalia y camelia)       *"
    Write-Host "*  4. Descargar ambos repositorios en carpeta personalizada  *"
    Write-Host "*  5. Salir                                                  *"
    Write-Host "**************************************************"
    $opcion = Read-Host "Introduce una opción"

    # Inicializamos las variables para el resumen combinado
    $totalClonados = [ref]0
    $totalEliminados = [ref]0
    $totalErrores = [ref]0

    # Validación de la opción ingresada
    if ($opcion -eq "1" -or $opcion -eq "2") {
        # Clona en la ruta predeterminada
        ClonarRepositorios -repoName $reposNames[$opcion - 1] -destinationPath $defaultDestinationPath `
                           -totalClonados $totalClonados -totalEliminados $totalEliminados -totalErrores $totalErrores
    } elseif ($opcion -eq "3") {
        # Clona ambos repositorios en la ruta predeterminada
        foreach ($repo in $reposNames) {
            ClonarRepositorios -repoName $repo -destinationPath $defaultDestinationPath `
                               -totalClonados $totalClonados -totalEliminados $totalEliminados -totalErrores $totalErrores
        }
    } elseif ($opcion -eq "4") {
        # Solicita el nombre de la subcarpeta al usuario
        $nombreCarpeta = Read-Host "Introduce el nombre de la carpeta"
        $rutaPersonalizada = "$defaultDestinationPath\$nombreCarpeta"

        # Descarga ambos repositorios automáticamente en la carpeta personalizada
        foreach ($repo in $reposNames) {
            ClonarRepositorios -repoName $repo -destinationPath $rutaPersonalizada `
                               -totalClonados $totalClonados -totalEliminados $totalEliminados -totalErrores $totalErrores
        }
    } elseif ($opcion -eq "5") {
        Write-Host "Saliendo del script..." -ForegroundColor Yellow
        break  # Salir del bucle
    } else {
        Write-Host "* Opción no válida. Elige 1, 2, 3, 4 o 5. *" -ForegroundColor Red
    }

    # Agregar un espacio antes de volver a mostrar el menú
    Write-Host "`n"
}
