GET http://localhost:8080/api/database/validate?option=1


package com.utilidades.configuracion;

import com.example.databasevalidation.service.CyberArkService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import oracle.jdbc.pool.OracleDataSource;
import javax.sql.DataSource;
import java.sql.SQLException;

@Configuration
@Profile("oracle")
public class OracleConfiguration {

    private final CyberArkService cyberArkService;

    public OracleConfiguration(CyberArkService cyberArkService) {
        this.cyberArkService = cyberArkService;
    }

    @Bean
    public DataSource dataSource(String username, String nickname) throws SQLException {
        String password = cyberArkService.getPassword(nickname);

        OracleDataSource dataSource = new OracleDataSource();
        dataSource.setUser(username);
        dataSource.setPassword(password);
        dataSource.setURL("jdbc:oracle:thin:@//localhost:1521/orcl");
        dataSource.setFastConnectionFailoverEnabled(true);
        dataSource.setImplicitCachingEnabled(true);
        return dataSource;
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.databasevalidation.service;

import com.example.databasevalidation.dto.ConnectionResponse;
import com.utilidades.configuracion.OracleConfiguration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

@Service
public class DatabaseValidationService {

    @Value("${spring.datasource.url}")
    private String dbUrl;

    private final CyberArkService cyberArkService;
    private final OracleConfiguration oracleConfiguration;

    public DatabaseValidationService(CyberArkService cyberArkService, OracleConfiguration oracleConfiguration) {
        this.cyberArkService = cyberArkService;
        this.oracleConfiguration = oracleConfiguration;
    }

    public ConnectionResponse validateConnection(int option) {
        String username;
        String nickname;

        switch (option) {
            case 1:
                username = "user1";
                nickname = "nickname1";
                break;
            case 2:
                username = "user2";
                nickname = "nickname2";
                break;
            case 3:
                username = "user3";
                nickname = "nickname3";
                break;
            default:
                return new ConnectionResponse("error", "Invalid option");
        }

        try {
            DataSource dataSource = oracleConfiguration.dataSource(username, nickname);
            try (Connection connection = dataSource.getConnection()) {
                if (connection.isValid(2)) {
                    return new ConnectionResponse("success", "Connection successful");
                } else {
                    return new ConnectionResponse("error", "Connection not successful");
                }
            }
        } catch (SQLException e) {
            return new ConnectionResponse("error", "Connection failed: " + e.getMessage());
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.example.databasevalidation.controller;

import com.example.databasevalidation.dto.ConnectionResponse;
import com.example.databasevalidation.service.DatabaseValidationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/database")
public class DatabaseValidationController {

    @Autowired
    private DatabaseValidationService validationService;

    @GetMapping("/validate")
    public ConnectionResponse validateConnection(@RequestParam int option) {
        return validationService.validateConnection(option);
    }
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////



public class ConnectionResponse {
    private String status;
    private String message;

    public ConnectionResponse(String status, String message) {
        this.status = status;
        this.message = message;
    }

    public String getStatus() {
        return status;
    }

    public String getMessage() {
        return message;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}