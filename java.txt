import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI(ApiValues apiValues) {
        return new OpenAPI()
                .info(new Info()
                        .title(apiValues.getTitle())
                        .version(apiValues.getVersion())
                        .description(apiValues.getDescriptionApi())
                        .contact(new Contact()
                                .name(apiValues.getNameDeveloper())
                                .email(apiValues.getEmailDeveloper())
                                .url(apiValues.getContactUrl()) // si tienes una
                        )
                );
    }
}



<dependency>
  <groupId>org.springdoc</groupId>
  <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
  <version>2.5.0</version>
</dependency>

@Operation(
    summary = ApiConstants.GET_FMS_FACILITY,
    description = "Descripci√≥n breve si aplica", // Opcional
    responses = {
        @ApiResponse(responseCode = ApiConstants.CODE_OK, description = ApiConstants.OK,content = @Content(schema = @Schema(implementation = FcmNewDataSet.class))),
        @ApiResponse(responseCode = ApiConstants.CODE_BAD_REQUEST, description = ApiConstants.BAD_REQUEST, content = @Content(schema = @Schema(implementation = ErrorResponse.class))),
        @ApiResponse(responseCode = ApiConstants.CODE_UNAUTHORIZED, description = ApiConstants.UNAUTHORIZED, content = @Content(schema = @Schema(implementation = ErrorResponse.class))),
        @ApiResponse(responseCode = ApiConstants.NOT_FOUND, description = ApiConstants.RESOURCE_NOT_FOUND,  content = @Content(schema = @Schema(implementation = ErrorResponse.class))),
        @ApiResponse(responseCode = ApiConstants.CODE_INTERNAL_ERROR, description = ApiConstants.INTERNAL_ERROR, content = @Content(schema = @Schema(implementation = ErrorResponse.class)))
    }
)
@GetMapping(value = ApiValues.GET_FMS_FACILITY, produces = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity<FcmFacilityResponse> getFmsFacility(
        @Valid @RequestParam(name = ApiConstants.GFRN) String gfrn,
        @Valid @RequestParam(name = ApiConstants.GFCID) String gfcid) {

    return new ResponseEntity<>(
            this.fmsFacilityService.getFmsDataSet(gfrn, new BigDecimal(gfcid)),
            HttpStatus.OK
    );
}
