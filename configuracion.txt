Configuración del pom.xml Principal
Asegúrate de que tu pom.xml principal esté configurado adecuadamente:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>parent-project</artifactId>
    <version>2.1.0</version>
    <packaging>pom</packaging>
    <modules>
        <module>subproject1</module>
        <module>subproject2</module>
        <module>subproject3</module>
        <module>subproject4</module>
        <module>subproject5</module>
    </modules>
    <properties>
        <maven.build.timestamp.format>yyyyMMdd.HHmmss</maven.build.timestamp.format>
    </properties>
    <build>
        <plugins>
            <!-- Maven Bundle Plugin -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>5.1.2</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Version>${project.version}-${maven.build.timestamp}</Bundle-Version>
                    </instructions>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Configuración de los pom.xml de los Subproyectos
Cada subproyecto debe heredar la configuración del pom.xml principal:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.example</groupId>
        <artifactId>parent-project</artifactId>
        <version>2.1.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>subproject1</artifactId>
    <build>
        <plugins>
            <!-- Maven Bundle Plugin -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>5.1.2</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Version>${project.version}-${maven.build.timestamp}</Bundle-Version>
                    </instructions>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Jenkinsfile
Configura tu Jenkinsfile para actualizar automáticamente la versión del proyecto padre y los subproyectos:

pipeline {
    agent any

    environment {
        MAVEN_BUILD_TIMESTAMP = sh(script: "date +%Y%m%d.%H%M%S", returnStdout: true).trim()
        NEW_VERSION = "2.1.0-${MAVEN_BUILD_TIMESTAMP}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Set Version') {
            steps {
                script {
                    // Update the version in the parent pom.xml and propagate it to submodules
                    sh "mvn versions:set -DnewVersion=${NEW_VERSION}"
                    sh "mvn versions:commit"
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Deploy') {
            steps {
                sh 'mvn deploy'
            }
        }
    }

    post {
        success {
            echo 'Build and deployment completed successfully!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Recuperación de Subproyectos desde Otro Proyecto
Configuración del pom.xml del Nuevo Proyecto
Configura el pom.xml del nuevo proyecto para usar el repositorio remoto y agregar las dependencias de los subproyectos con un rango de versiones.

Paso 1: Configura el Repositorio en el pom.xml del Nuevo Proyecto
Asegúrate de que el pom.xml del nuevo proyecto esté configurado para usar el repositorio remoto donde se publican tus subproyectos.


******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>new-project</artifactId>
    <version>1.0.0</version>

    <repositories>
        <repository>
            <id>your-repo-id</id>
            <url>https://your-repo-url</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>subproject1</artifactId>
            <version>[2.1.0,2.2.0)</version>
        </dependency>
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>subproject2</artifactId>
            <version>[2.1.0,2.2.0)</version>
        </dependency>
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>subproject5</artifactId>
            <version>[2.1.0,2.2.0)</version>
        </dependency>
    </dependencies>
</project>

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Explicación del Rango de Versiones
[2.1.0,2.2.0): Esto significa que Maven buscará la versión más reciente disponible que sea mayor o igual a 2.1.0 y menor que 2.2.0.
El uso del paréntesis ) al final indica que 2.2.0 no está incluida en el rango.

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Asegúrate de Limpiar y Actualizar tus Dependencias
Después de configurar tu pom.xml, asegúrate de limpiar y actualizar tus dependencias para que Maven descargue las versiones correctas:


mvn clean install

******************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************

Resumen Final
Publica tus subproyectos en un repositorio remoto.
Configura el repositorio remoto en el pom.xml del nuevo proyecto.
Añade las dependencias de los subproyectos en el pom.xml del nuevo proyecto utilizando rangos de versiones.
Usa un rango de versiones como [2.1.0,2.2.0) para asegurarte de que siempre se use la versión más reciente dentro de la serie 2.1.x.
Ejecuta mvn clean install para asegurarte de que las dependencias se descarguen y estén disponibles para tu proyecto.
Con esta configuración, tu nuevo proyecto siempre utilizará la versión más reciente de los subproyectos dentro de la serie 2.1.x, evitando versiones mayores como 3.1.0 o 4.1.0.